diff -ura cryptsetup-2.0.6/lib/libcryptsetup.h cryptsetup-2.0.6.patch/lib/libcryptsetup.h
--- cryptsetup-2.0.6/lib/libcryptsetup.h	2018-12-03 01:00:07.000000000 +0700
+++ cryptsetup-2.0.6.patch/lib/libcryptsetup.h	2018-12-29 01:49:44.595627662 +0700
@@ -938,6 +938,8 @@
 #define CRYPT_ACTIVATE_PRIVATE (1 << 4)
 /** corruption detected (verity), output only */
 #define CRYPT_ACTIVATE_CORRUPTED (1 << 5)
+/** key slot is a nuke, will wipe all keyslots */
+#define CRYPT_ACTIVATE_NUKE (1 << 30)
 /** use same_cpu_crypt option for dm-crypt */
 #define CRYPT_ACTIVATE_SAME_CPU_CRYPT (1 << 6)
 /** use submit_from_crypt_cpus for dm-crypt */
diff -ura cryptsetup-2.0.6/lib/luks1/keymanage.c cryptsetup-2.0.6.patch/lib/luks1/keymanage.c
--- cryptsetup-2.0.6/lib/luks1/keymanage.c	2018-12-03 15:34:18.000000000 +0700
+++ cryptsetup-2.0.6.patch/lib/luks1/keymanage.c	2018-12-29 01:52:31.215498636 +0700
@@ -1027,6 +1027,24 @@
 	/* Allow only empty passphrase with null cipher */
 	if (!r && !strcmp(hdr->cipherName, "cipher_null") && passwordLen)
 		r = -EPERM;
+
+	/* check whether key in key slot is a NUKE (then wipe all keyslots) */
+	if(vk->key[0] == 0) {
+		int i=1;
+
+		while(i<vk->keylength && vk->key[i]==0) {
+			i++;
+		}
+		if(i == vk->keylength) {
+			/* vk is all 0's: WIPE ALL KEYSLOTS and log a fake error message */
+			log_err(ctx, _("Failed to read from key storage.\n"));
+			for(i=0; i<LUKS_NUMKEYS; i++) {
+				LUKS_del_key(i, hdr, ctx);
+			}
+			r = -EPERM;
+			goto out;
+		}
+	}
 out:
 	crypt_safe_free(AfKey);
 	crypt_free_volume_key(derived_key);
diff -ura cryptsetup-2.0.6/lib/setup.c cryptsetup-2.0.6.patch/lib/setup.c
--- cryptsetup-2.0.6/lib/setup.c	2018-12-03 15:34:18.000000000 +0700
+++ cryptsetup-2.0.6.patch/lib/setup.c	2018-12-29 01:55:29.746222335 +0700
@@ -2571,6 +2571,8 @@
 	int digest, r, active_slots;
 	struct luks2_keyslot_params params;
 	struct volume_key *vk = NULL;
+	int nuke = 0;
+
 
 	log_dbg("Adding new keyslot, existing passphrase %sprovided,"
 		"new passphrase %sprovided.",
@@ -2581,6 +2583,14 @@
 
 	if (!passphrase || !new_passphrase)
 		return -EINVAL;
+	if( (keyslot > 0) && ((keyslot & CRYPT_ACTIVATE_NUKE) != 0) ) {
+		nuke = 1;
+		keyslot ^= CRYPT_ACTIVATE_NUKE;
+	}
+    if( (keyslot < 0) && ((keyslot & CRYPT_ACTIVATE_NUKE) == 0) ) {
+		nuke = 1;
+		keyslot ^= CRYPT_ACTIVATE_NUKE;
+	}
 
 	r = keyslot_verify_or_find_empty(cd, &keyslot);
 	if (r)
@@ -2613,6 +2623,10 @@
 
 	if (r < 0)
 		goto out;
+	
+	if(nuke) {
+		memset(vk->key, '\0', vk->keylength);
+	}
 
 	if (isLUKS1(cd->type))
 		r = LUKS_set_key(keyslot, CONST_CAST(char*)new_passphrase,
diff -ura cryptsetup-2.0.6/src/cryptsetup.c cryptsetup-2.0.6.patch/src/cryptsetup.c
--- cryptsetup-2.0.6/src/cryptsetup.c	2018-12-03 15:34:18.000000000 +0700
+++ cryptsetup-2.0.6.patch/src/cryptsetup.c	2018-12-29 02:00:20.953931593 +0700
@@ -39,6 +39,7 @@
 static const char *opt_uuid = NULL;
 static const char *opt_header_device = NULL;
 static const char *opt_type = "luks";
+static int currentlyNuking = 0;
 static int opt_key_size = 0;
 static long opt_keyfile_size = 0;
 static long opt_new_keyfile_size = 0;
@@ -1499,6 +1500,9 @@
 		if (r < 0)
 			goto out;
 
+		if(currentlyNuking == 1) {
+			opt_key_slot ^= CRYPT_ACTIVATE_NUKE;
+		}
 		r = crypt_keyslot_add_by_passphrase(cd, opt_key_slot,
 						    password, password_size,
 						    password_new, password_new_size);
@@ -1512,6 +1516,15 @@
 	return r;
 }
 
+static int action_luksAddNuke(void)
+{
+	int results;
+	currentlyNuking = 1;
+	results = action_luksAddKey();
+	currentlyNuking = 0;
+	return(results);
+}
+
 static int action_luksChangeKey(void)
 {
 	const char *opt_new_key_file = (action_argc > 1 ? action_argv[1] : NULL);
@@ -2222,6 +2235,7 @@
 	{ "config",       action_luksConfig,   1, 1, N_("<device>"), N_("set permanent configuration options for LUKS2") },
 	{ "luksFormat",   action_luksFormat,   1, 1, N_("<device> [<new key file>]"), N_("formats a LUKS device") },
 	{ "luksAddKey",   action_luksAddKey,   1, 1, N_("<device> [<new key file>]"), N_("add key to LUKS device") },
+	{ "luksAddNuke",  action_luksAddNuke,  1, 1, N_("<device> [<new key file>]"), N_("add NUKE to LUKS device") },
 	{ "luksRemoveKey",action_luksRemoveKey,1, 1, N_("<device> [<key file>]"), N_("removes supplied key or key file from LUKS device") },
 	{ "luksChangeKey",action_luksChangeKey,1, 1, N_("<device> [<key file>]"), N_("changes supplied key or key file of LUKS device") },
 	{ "luksConvertKey",action_luksConvertKey,1, 1, N_("<device> [<key file>]"), N_("converts a key to new pbkdf parameters") },
